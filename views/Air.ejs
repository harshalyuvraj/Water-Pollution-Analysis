<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Air Quality Parameters</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/styles/air.css">
    <style>
        .error-message {
            display: none;
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        .loading-spinner {
            display: none;
        }
    </style>
</head>

<body class="bg-gray-100">
    <!-- Back to Home Button -->
    <div class="back-button-container mb-4">
        <button class="back-button px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600" onclick="goBackHome()">&#8592; Back to Home</button>
    </div>

    <div class="container mx-auto p-6">
        <h2 class="text-3xl font-bold text-gray-700 mb-6">Air Quality Parameters</h2>

        <!-- Error Message Container -->
        <div id="form-error" class="hidden mb-4 p-4 bg-red-100 border-l-4 border-red-500 text-red-700"></div>

        <!-- Form Box -->
        <div class="bg-white shadow-md rounded-lg p-6">
            <form id="air-quality-parameters-form" class="grid grid-cols-1 md:grid-cols-2 gap-6" onsubmit="saveFormData(event)">
                <!-- Sample ID -->
                <div class="form-group">
                    <label for="sampleID" class="block text-gray-700 font-semibold mb-2">Sample ID *</label>
                    <input type="text" id="sampleID" name="sampleID" required
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                           placeholder="Enter Sample ID">
                    <div id="sampleID-error" class="error-message"></div>
                </div>
                
                <!-- Particulate Matter -->
                <div class="form-group">
                    <label for="pm" class="block text-gray-700 font-semibold mb-2">Particulate Matter (PM1/PM2.5) (µg/m³) *</label>
                    <input type="number" step="0.01" id="pm" name="pm" required min="0"
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                           placeholder="Enter PM levels">
                    <div id="pm-error" class="error-message"></div>
                </div>
                
                <!-- SO2 -->
                <div class="form-group">
                    <label for="so2" class="block text-gray-700 font-semibold mb-2">SO₂ (µg/m³) *</label>
                    <input type="number" step="0.01" id="so2" name="so2" required min="0"
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                           placeholder="Enter SO₂ levels">
                    <div id="so2-error" class="error-message"></div>
                </div>

                <!-- NO2 -->
                <div class="form-group">
                    <label for="no2" class="block text-gray-700 font-semibold mb-2">NO₂ (µg/m³) *</label>
                    <input type="number" step="0.01" id="no2" name="no2" required min="0"
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                           placeholder="Enter NO₂ levels">
                    <div id="no2-error" class="error-message"></div>
                </div>

                <!-- CO -->
                <div class="form-group">
                    <label for="co" class="block text-gray-700 font-semibold mb-2">CO (µg/m³) *</label>
                    <input type="number" step="0.01" id="co" name="co" required min="0"
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                           placeholder="Enter CO levels">
                    <div id="co-error" class="error-message"></div>
                </div>

                <!-- O3 -->
                <div class="form-group">
                    <label for="o3" class="block text-gray-700 font-semibold mb-2">O₃ (µg/m³) *</label>
                    <input type="number" step="0.01" id="o3" name="o3" required min="0"
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                           placeholder="Enter O₃ levels">
                    <div id="o3-error" class="error-message"></div>
                </div>

                <!-- Lead -->
                <div class="form-group">
                    <label for="lead" class="block text-gray-700 font-semibold mb-2">Lead (Pb) (µg/m³) *</label>
                    <input type="number" step="0.01" id="lead" name="lead" required min="0"
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                           placeholder="Enter Lead levels">
                    <div id="lead-error" class="error-message"></div>
                </div>

                <!-- VOCs -->
                <div class="form-group">
                    <label for="vocs" class="block text-gray-700 font-semibold mb-2">VOCs (µg/m³) *</label>
                    <input type="number" step="0.01" id="vocs" name="vocs" required min="0"
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400"
                           placeholder="Enter VOC levels">
                    <div id="vocs-error" class="error-message"></div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions md:col-span-2 flex justify-between items-center">
                    <button type="submit" id="submit-btn" class="save-button px-6 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors">
                        <span id="submit-text">Save Data</span>
                        <span id="submit-spinner" class="loading-spinner ml-2">
                            <svg class="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                        </span>
                    </button>
                    <button type="reset" class="reset-button px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors">
                        Clear Form
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        function goBackHome() {
            window.location.href = '/fwater';
        }

        // Clear all error messages
        function clearErrors() {
            document.querySelectorAll('.error-message').forEach(el => {
                el.style.display = 'none';
                el.textContent = '';
            });
            document.getElementById('form-error').style.display = 'none';
        }

        // Show error for a specific field
        function showError(fieldId, message) {
            const field = document.getElementById(fieldId);
            const errorElement = document.getElementById(`${fieldId}-error`);
            
            field.classList.add('border-red-500');
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        // Validate form inputs
        function validateForm() {
            let isValid = true;
            clearErrors();

            // Validate all required fields
            const requiredFields = [
                'sampleID', 'pm', 'so2', 'no2', 'co', 'o3', 'lead', 'vocs'
            ];

            requiredFields.forEach(fieldId => {
                const value = document.getElementById(fieldId).value.trim();
                if (!value) {
                    showError(fieldId, 'This field is required');
                    isValid = false;
                }
            });

            // Validate numeric fields are positive
            const numericFields = ['pm', 'so2', 'no2', 'co', 'o3', 'lead', 'vocs'];
            numericFields.forEach(fieldId => {
                const value = parseFloat(document.getElementById(fieldId).value);
                if (value < 0) {
                    showError(fieldId, 'Value must be positive');
                    isValid = false;
                }
            });

            return isValid;
        }

        // Handle form submission
        async function saveFormData(event) {
            event.preventDefault();
            
            if (!validateForm()) {
                return;
            }

            // Set loading state
            const submitBtn = document.getElementById('submit-btn');
            const submitText = document.getElementById('submit-text');
            const spinner = document.getElementById('submit-spinner');
            
            submitBtn.disabled = true;
            submitText.textContent = 'Saving...';
            spinner.style.display = 'inline-block';

            try {
                // Prepare form data
                const formData = {
                    sampleID: document.getElementById('sampleID').value.trim(),
                    pm: parseFloat(document.getElementById('pm').value),
                    so2: parseFloat(document.getElementById('so2').value),
                    no2: parseFloat(document.getElementById('no2').value),
                    co: parseFloat(document.getElementById('co').value),
                    o3: parseFloat(document.getElementById('o3').value),
                    lead: parseFloat(document.getElementById('lead').value),
                    vocs: parseFloat(document.getElementById('vocs').value)
                };

                // Submit to server
                const response = await fetch('/air', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.message || 'Server error occurred');
                }

                // Handle successful submission
                if (data.success) {
                    alert('Data saved successfully!');
                    document.getElementById('air-quality-parameters-form').reset();
                    window.location.href = '/fwater';
                } else {
                    // Handle server-side validation errors
                    if (data.errors) {
                        Object.entries(data.errors).forEach(([field, message]) => {
                            showError(field, message);
                        });
                    } else {
                        throw new Error(data.message || 'Unknown error occurred');
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('form-error').textContent = error.message;
                document.getElementById('form-error').style.display = 'block';
            } finally {
                // Reset button state
                submitBtn.disabled = false;
                submitText.textContent = 'Save Data';
                spinner.style.display = 'none';
            }
        }
    </script>
</body>
</html>